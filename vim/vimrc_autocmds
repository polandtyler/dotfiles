""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DECLARE FUNCTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:shouldFormatPython = 1

function! FormatPython()
  if g:shouldFormatPython == 1
    if $VIRTUAL_ENV != ""
      !$VIRTUAL_ENV/bin/yapf % -i
    else
      !yapf % -i
    endif
    redraw
  endif
endfunction

function! s:StripWhiteSpaces()
  if exists('b:noStripWhitespace')
    return
  endif

  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" END FUNCTION DECLARATIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" associate Dockerfile with sh filetype syntax
autocmd BufRead,BufNewFile Dockerfile setfiletype sh

" associate python stub file with py filetype syntax
autocmd BufRead,BufNewFile *.pyi setfiletype python

" associate .conf files with upstart filetype syntqx
autocmd BufEnter,BufRead,BufNewFile *.conf set filetype=upstart
autocmd BufEnter,BufRead,BufNewFile *.j2 set ft=jinja

" do not extend comments when opening a new line
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" autocmd BufWritePost *.py :silent call FormatPython()

autocmd Filetype t let b:noStripWhitespace=1
autocmd BufWritePre * StripWhiteSpaces
command! -range=% StripWhiteSpaces :silent call <SID>StripWhiteSpaces()

"Javascript specific
" javascript uses 2 spaces everywhere
autocmd Filetype javascript set autoread
autocmd FileType javascript set listchars=tab:  ,trail:·

" autocmd BufEnter *.tsx set filetype=typescript
autocmd FileType Fastfile set filetype=ruby

autocmd BufEnter .*yml.j2 set ft=yaml
autocmd BufEnter .*yaml.j2 set ft=yaml

function! DlvDebugRoot()
  let root = FindRootDirectory()
  call delve#runCommand("debug " . root, "", root)
  return ""
endfunction

"Go specific settings
autocmd FileType go nmap <leader>in <Plug>(go-info)
autocmd FileType go nmap <leader>im <Plug>(go-implements)
autocmd FileType go nmap <leader>p <Plug>(go-referrers)
autocmd FileType go noremap <silent> <leader>dt :call delve#toggleBreakpoint(delve#getFile(), line('.'))<CR>
" autocmd FileType go nmap <leader>dd <Plug>(go-doc)
" autocmd FileType go nmap <leader>db <Plug>(go-doc-browser)
" autocmd FileType go nmap <leader>ds <Plug>(go-doc-split)
" autocmd FileType go nmap <leader>dv <Plug>(go-doc-vertical)
" autocmd FileType go nmap <leader>dt <Plug>(go-doc-tab)
autocmd FileType go nmap <leader>r <Plug>(go-run)
autocmd FileType go nmap <leader>b <Plug>(go-build)
autocmd FileType go nmap <leader>t <Plug>(go-test)
" autocmd FileType go nmap <leader>c <Plug>(go-coverage)
autocmd FileType go noremap <leader>gp :call DlvDebugRoot()<CR>
autocmd FileType go nmap <leader>gd <Plug>(go-def)
autocmd FileType go nmap <leader>gs <Plug>(go-def-split)
autocmd FileType go nmap <leader>gv <Plug>(go-def-vertical)
autocmd FileType go nmap <leader>gt <Plug>(go-def-tab)
autocmd FileType go nmap <leader>e <Plug>(go-rename)
autocmd FileType go nmap <leader>I :GoImports<CR>
autocmd FileType go set listchars=tab:  ,trail:·

autocmd FileType python nmap <buffer> <leader>k opdb.set_trace()<esc>
au BufNewFile,BufRead Jenkinsfile setf groovy
