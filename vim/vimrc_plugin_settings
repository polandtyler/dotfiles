" Configuration related to plugins
" --------------------------------
"
" This file should be loaded only if the &loadplugins options is set
" If we start up vim with --noplugins then we get faster startup, but some of
" the commands in this file might error if the plugins aren't loaded.

""""""""""""""""""
" search pulse Plugin => make search position more obvious
""""""""""""""""""
let g:vim_search_pulse_mode = 'pattern'

""""""""""""""""""
" NerdTree Plugin
""""""""""""""""""
let NERDTreeHijackNetrw=1
let NERDTreeMouseMode=1
let NERDTreeShowHidden=1

nmap <silent> <leader><Tab> :NERDTreeToggle<CR>
nmap <silent> <leader>n :NERDTreeFind<CR>

" ## How can I prevent other buffers replacing NERDTree in its window? ##
" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
autocmd BufEnter * if winnr() == winnr('h') && bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

let g:loaded_AlignMapsPlugin = 1

""""""""""""""""""
" IndentGuides plugin
""""""""""""""""""
let g:indent_guides_default_mapping = 0
let g:indent_guides_guide_size  = 1
let g:indent_guides_start_level = 2
let g:indent_guides_auto_colors = 0
autocmd VimEnter * IndentGuidesEnable
hi IndentGuidesOdd  guibg=#003540  ctermbg=0
hi IndentGuidesEven guibg=#003540  ctermbg=0

""""""""""""""""""
" NERDCommenter
""""""""""""""""""
noremap <silent> <leader>c <Plug>NERDCommenterToggle<cr>
let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1

"""""""""""""""""
" Markdown Settings
"""""""""""""""""
let g:markdown_fenced_languages = ['bash=sh', 'css', 'erb=eruby', 'javascript',
    \ 'js=javascript', 'json=javascript', 'ruby', 'sass', 'sh', 'xml']


"""""""""""""""""
" Vim-Easy-Align Settings
"""""""""""""""""
map <leader>= :call EnterAlign()<cr>
vmap <Enter> <Plug>(EasyAlign)


"""""""""""""""""
" vim-go
"""""""""""""""""
let g:go_fmt_command = "goimports"
let g:go_def_mapping_enabled = 0
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_autodetect_gopath = 0

let g:VimuxUseNearest = v:false
let g:delve_use_vimux = "1"
" let g:delve_project_root = FindRootDirectory()

set rtp+=$GOPATH/src/github.com/golang/lint/misc/vim

" """""""""""""""""
" " neovimhaskell/haskell-vim
" """""""""""""""""
"
" " Align 'then' two spaces after 'if'
" let g:haskell_indent_if = 2
" " Indent 'where' block two spaces under previous body
" let g:haskell_indent_before_where = 2
" " Allow a second case indent style (see haskell-vim README)
" let g:haskell_indent_case_alternative = 1
" " Only next under 'let' if there's an equals sign
" let g:haskell_indent_let_no_in = 0
"
" """""""""""""""""
" " hindent & stylish-haskell
" """""""""""""""""
"
" " Indenting on save is too aggressive for me
" let g:hindent_on_save = 0
"
" " Key bindings
" augroup haskellStylish
"   au!
"   " Just hindent
"   au FileType haskell nnoremap <leader>hi :Hindent<CR>
"   " Just stylish-haskell
"   au FileType haskell nnoremap <leader>hs :call HaskellFormat('stylish')<CR>
"   " First hindent, then stylish-haskell
"   au FileType haskell nnoremap <leader>hf :call HaskellFormat('both')<CR>
" augroup END

"""""""""""""""""
" parsonsmatt/intero-neovim
"""""""""""""""""

let g:intero_start_immediately = 0
let g:intero_type_on_hover = 1
" OPTIONAL: Make the update time shorter, so the type info will trigger faster.
set updatetime=1000

augroup interoMaps
  au!

  au FileType haskell nnoremap <silent> <leader>io :InteroOpen<CR>
  au FileType haskell nnoremap <silent> <leader>iov :InteroOpen<CR><C-W>H
  au FileType haskell nnoremap <silent> <leader>ih :InteroHide<CR>
  au FileType haskell nnoremap <silent> <leader>is :InteroStart<CR>
  au FileType haskell nnoremap <silent> <leader>ik :InteroKill<CR>

  au BufWritePost *.hs InteroReload
  au FileType haskell nnoremap <silent> <leader>wr :w \| :InteroReload<CR>
  au FileType haskell nnoremap <silent> <leader>il :InteroLoadCurrentModule<CR>
  au FileType haskell nnoremap <silent> <leader>if :InteroLoadCurrentFile<CR>

  au FileType haskell map <leader>t <Plug>InteroGenericType
  au FileType haskell map <leader>T <Plug>InteroType
  au FileType haskell nnoremap <silent> <leader>it :InteroTypeInsert<CR>

  au FileType haskell nnoremap <silent> <leader>jd :InteroGoToDef<CR>
  au FileType haskell nnoremap <silent> <leader>iu :InteroUses<CR>
  au FileType haskell nnoremap <leader>ist :InteroSetTargets<SPACE>
augroup END

au FileType python nnoremap <silent> <leader>N :call InsertRightAlignedNOQA()<cr>

"""""""""""""""""
"  neoclide/coc.nvim
"""""""""""""""""
" :CocInstall coc-json coc-css coc-tsserver coc-yaml coc-python coc-highlight

set hidden
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes
let g:coc_status_error_sign = '✗ '
let g:coc_status_warning_sign = '⚠ '

nmap <silent> [d <Plug>(coc-diagnostic-prev)
nmap <silent> ]d <Plug>(coc-diagnostic-next)
nmap <leader>d :call ListCurrentBufferDiagnostics()<CR>

nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)
nmap <silent> <leader>rr <Plug>(coc-rename)

autocmd FileType python let b:coc_root_patterns = ['.git', '.env']

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Coc Further Settings

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use <c-space> to trigger completion
" if has('nvim')
"   inoremap <silent><expr> <c-space> coc#refresh()
" else
"   inoremap <silent><expr> <c-@> coc#refresh()
" endif

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>
" nnoremap <silent> K :call <SID>show_documentation()<CR>
" TODO: set C-[ to close float window => only add map to window
" nnoremap <C-_> <Plug>(coc-float-hide)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> [[  :<C-u>CocList diagnostics<cr>
" Manage extensions
" nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" " Show commands
" nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" " Find symbol of current document
" nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" " Search workspace symbols
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" " Do default action for next item
" nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" " Do default action for previous item
" nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" " Resume latest coc list
" nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

""""""""""""""""""
" YankRing plugin
""""""""""""""""""
nmap yr :YRShow<CR>
nmap yc :YRClear<CR>
nmap yp p:YRPop<CR>
nmap yP P:YRPop<CR>
let g:yankring_min_element_length = 2
