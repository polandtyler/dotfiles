" Configuration related to plugins
" --------------------------------
"
" This file should be loaded only if the &loadplugins options is set
" If we start up vim with --noplugins then we get faster startup, but some of
" the commands in this file might error if the plugins aren't loaded.

""""""""""""""""""
" Deoplete Plugin
""""""""""""""""""
" let g:deoplete#enable_at_startup = 1
" set completeopt-=preview

""""""""""""""""""
" EchoDoc
""""""""""""""""""
set noshowmode
let g:echodoc_enable_at_startup=1
set shortmess+=c

""""""""""""""""""
" Supertab
""""""""""""""""""
let g:SuperTabDefaultCompletionType = "<c-n>"

""""""""""""""""""
" NerdTree Plugin
""""""""""""""""""

" Use instead of Netrw when doing an edit /foobar
let NERDTreeHijackNetrw=1
" Single click for everything
let NERDTreeMouseMode=1
" Show hidden files by default
let NERDTreeShowHidden=1
" Hide .pyc and __init__.py files
" let NERDTreeIgnore = ['\.pyc$', '__init__.py']

nmap <silent> <leader><Tab> :NERDTreeToggle<CR>
nmap <silent> <leader>n :NERDTreeFind<CR>

" skip AlignMaps default mappings
let g:loaded_AlignMapsPlugin = 1

""""""""""""""""""
" IndentGuides plugin
""""""""""""""""""
let g:indent_guides_guide_size  = 1
let g:indent_guides_start_level = 2
let g:indent_guides_auto_colors = 0
autocmd VimEnter * IndentGuidesEnable
hi IndentGuidesOdd  guibg=#003540  ctermbg=0
hi IndentGuidesEven guibg=#003540  ctermbg=0

""""""""""""""""""
" YankRing plugin
""""""""""""""""""
nmap yr :YRShow<CR>
nmap yc :YRClear<CR>
nmap yp p:YRPop<CR>
nmap yP P:YRPop<CR>
let g:yankring_min_element_length = 2

""""""""""""""""""
" tComment
""""""""""""""""""
" Disable all of the default mappings
let g:tcommentMapLeader1   = ""
let g:tcommentMapLeader2   = ""
let g:tcommentMapLeaderOp1 = ""
let g:tcommentMapLeaderOp2 = ""
" Create the only ones that matters
noremap <silent> <Leader>c :TComment<cr>

""""""""""""""""""
" AutoClose config
""""""""""""""""""
let g:AutoClosePairs = {'(': ')', '{': '}', '[': ']', '"': '"'}

nmap <F2> :OpenSession<CR>

""""""""""""""""""
" Airline config
""""""""""""""""""

let g:airline_powerline_fonts = 1
let g:airline#extensions#hunks#enabled = 0

""""""""""""""""""
" Fix CtrlP command
""""""""""""""""""
let g:ctrlp_map = '<leader>,'
let g:ctrlp_cmd = 'CtrlP'

nmap <leader>, :CtrlP<cr>
nmap <leader>C :CtrlPClearCache<cr>:CtrlP<cr>
" nmap <leader>l :CtrlPLine<cr>
nmap <leader>: :CtrlPBuff<cr>
" nmap <leader>m :CtrlPBufTag<cr>
" nmap <leader>M :CtrlPBufTagAll<cr>

let g:ctrlp_clear_cache_on_exit = 1

" ctrlp leaves stale caches behind if there is another vim process runnin
" which didn't use ctrlp. so we clear all caches on each new vim invocation
cal ctrlp#clra()
let g:ctrlp_max_height = 40

" jump to buffer in the same tab if already open
let g:ctrlp_switch_buffer = 1

" if in git repo - use git file listing command, should be faster
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files --exclude-standard -cod']

" open multiple files with <c-z> to mark and <c-o> to open. v - opening in
" vertical splits; j - jump to first open buffer; r - open first in current buffer
let g:ctrlp_open_multiple_files = 'vjr'
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'mixed', 'line', 'funky']

nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

"""""""""""""""""
" Jedi Python settings
"""""""""""""""""
let g:jedi#force_py_version=3
let g:jedi#usages_command = "<leader>u"
" let g:jedi#completions_enabled = 0

"""""""""""""""""
" Tern settings
"""""""""""""""""
let g:tern_show_argument_hints='on_delay'
" see http://usevim.com/2013/05/24/tern/
" and http://usevim.com/files/tern_keyboard.pdf
let g:tern_map_keys=1

let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|**/components/'
" ignored paths for ctrl-p bundle
let g:ctrlp_mruf_relative = 1

"""""""""""""""""
" Markdown Settings
"""""""""""""""""
let g:markdown_fenced_languages = ['bash=sh', 'css', 'erb=eruby', 'javascript',
    \ 'js=javascript', 'json=javascript', 'ruby', 'sass', 'sh', 'xml']


" """""""""""""""""
" " Neomake Settings
" """""""""""""""""
" let g:neomake_haskell_enabled_makers = ['hlint']
" let g:neomake_javascript_enabled_makers = ['eslint']
" let g:neomake_typescript_enabled_makers = ['tslint']
"
" let config = neomake#utils#FindGlobFile('tsconfig.vim.json')
" if !empty(config)
"   let g:neomake_typescript_tslint_args = ['--project', config]
" endif
"
" let g:neomake_python_enabled_makers = ['flake8', 'mypy']
" let g:neomake_open_list = 2
" let g:neomake_python_mypy_maker = {
"   \ 'args': ['--check-untyped-defs', '--ignore-missing-imports'],
"   \ 'auto_enabled': 0,
"   \ 'errorformat': '%E%f:%l: error: %m,%W%f:%l: warning: %m,%I%f:%l: note: %m',
"   \ 'exe': 'mypy'
"   \ }
"
" function! NeomakeESlintChecker()
"   let l:npm_bin = ''
"   let l:eslint = 'eslint'
"
"   if executable('npm')
"     let l:npm_bin = split(system('npm bin'), '\n')[0]
"     let l:npm_prefix = split(system('npm prefix'), '\n')[0]
"   endif
"
"   if strlen(l:npm_bin) && executable(l:npm_bin . '/eslint')
"     let l:eslint = l:npm_bin . '/eslint'
"   endif
"
"   let b:neomake_javascript_eslint_exe = l:eslint
" endfunction
"
" call neomake#configure#automake('nw', 750)

" autocmd FileType javascript :call NeomakeESlintChecker()

" function! MaybeNeomake()
"   if &filetype != "haskell"
"     Neomake
"   endi
" endfunction
"
" autocmd! BufWritePost,BufReadPost * :call MaybeNeomake()
" autocmd! BufWritePost * :call MaybeNeomake()
" autocmd! VimEnter typescript NeomakeDisable

""""""""""""""""""
" nvim-typescript
""""""""""""""""""
autocmd FileType typescript nmap <silent> <leader>d :TSDef<cr>

"""""""""""""""""
" JSX Highlighting
"""""""""""""""""
let g:jsx_ext_required = 0 " Allow JSX in normal JS files

"""""""""""""""""
" Vim-Easy-Align Settings
"""""""""""""""""
map <Leader>= :call EnterAlign()<cr>
vmap <Enter> <Plug>(EasyAlign)

function! EnterAlign()
  let save_cursor = getpos(".")
  let l:win_view = winsaveview()
  :execute "normal vip\<Enter>="
  call winrestview(l:win_view)
  call setpos('.', save_cursor)
endfunction

"""""""""""""""""
" vim-easymotion
"""""""""""""""""
map <Leader> <Plug>(easymotion-prefix)
"""""""""""""""""
" vim-go
"""""""""""""""""
let g:go_fmt_command = "goimports"
let g:go_def_mapping_enabled = 0
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_autodetect_gopath = 0

let g:VimuxUseNearest = v:false
let g:delve_use_vimux = "1"
" let g:delve_project_root = FindRootDirectory()

set rtp+=$GOPATH/src/github.com/golang/lint/misc/vim

"""""""""""""""""
" neovimhaskell/haskell-vim
"""""""""""""""""

" Align 'then' two spaces after 'if'
let g:haskell_indent_if = 2
" Indent 'where' block two spaces under previous body
let g:haskell_indent_before_where = 2
" Allow a second case indent style (see haskell-vim README)
let g:haskell_indent_case_alternative = 1
" Only next under 'let' if there's an equals sign
let g:haskell_indent_let_no_in = 0

"""""""""""""""""
" hindent & stylish-haskell
"""""""""""""""""

" Indenting on save is too aggressive for me
let g:hindent_on_save = 0

" Helper function, called below with mappings
function! HaskellFormat(which) abort
  if a:which ==# 'hindent' || a:which ==# 'both'
    :Hindent
  endif
  if a:which ==# 'stylish' || a:which ==# 'both'
    silent! exe 'undojoin'
    silent! exe 'keepjumps %!stylish-haskell'
  endif
endfunction

" Key bindings
augroup haskellStylish
  au!
  " Just hindent
  au FileType haskell nnoremap <leader>hi :Hindent<CR>
  " Just stylish-haskell
  au FileType haskell nnoremap <leader>hs :call HaskellFormat('stylish')<CR>
  " First hindent, then stylish-haskell
  au FileType haskell nnoremap <leader>hf :call HaskellFormat('both')<CR>
augroup END

"""""""""""""""""
" w0rp/ale
"""""""""""""""""

" let g:ale_linters = {
"       \  'haskell': ['hlint']
" \}
"
" nmap <silent> <M-k> <Plug>(ale_previous_wrap)
" nmap <silent> <M-j> <Plug>(ale_next_wrap)
" nmap <silent> <M-j> <Plug>(ale_next_wrap)

"""""""""""""""""
" parsonsmatt/intero-neovim
"""""""""""""""""

let g:intero_start_immediately = 0
let g:intero_type_on_hover = 1
" OPTIONAL: Make the update time shorter, so the type info will trigger faster.
set updatetime=1000

augroup interoMaps
  au!

  au FileType haskell nnoremap <silent> <leader>io :InteroOpen<CR>
  au FileType haskell nnoremap <silent> <leader>iov :InteroOpen<CR><C-W>H
  au FileType haskell nnoremap <silent> <leader>ih :InteroHide<CR>
  au FileType haskell nnoremap <silent> <leader>is :InteroStart<CR>
  au FileType haskell nnoremap <silent> <leader>ik :InteroKill<CR>

  au BufWritePost *.hs InteroReload
  au FileType haskell nnoremap <silent> <leader>wr :w \| :InteroReload<CR>
  au FileType haskell nnoremap <silent> <leader>il :InteroLoadCurrentModule<CR>
  au FileType haskell nnoremap <silent> <leader>if :InteroLoadCurrentFile<CR>

  au FileType haskell map <leader>t <Plug>InteroGenericType
  au FileType haskell map <leader>T <Plug>InteroType
  au FileType haskell nnoremap <silent> <leader>it :InteroTypeInsert<CR>

  au FileType haskell nnoremap <silent> <leader>jd :InteroGoToDef<CR>
  au FileType haskell nnoremap <silent> <leader>iu :InteroUses<CR>
  au FileType haskell nnoremap <leader>ist :InteroSetTargets<SPACE>
augroup END

function! InsertRightAlignedNOQA()
  normal! $
  let a:pos = getpos('.')[2]
  call append(line('.'), "# noqa")
  sleep 100m
  normal! Jx
  execute ':Tabularize /#/l' . (73 - a:pos) . 'r1'
endfunction

au FileType python nnoremap <silent> <leader>N :call InsertRightAlignedNOQA()<cr>

"""""""""""""""""
"  neoclide/coc.nvim
"""""""""""""""""
" :CocInstall coc-json coc-css coc-tsserver coc-yaml coc-python coc-highlight

" if hidden is not set, TextEdit might fail.
set hidden
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup
" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes
" set signcolumn=auto:2
" let g:coc_global_extensions = '' " add extension names bere
let g:coc_status_error_sign = '✗ '
let g:coc_status_warning_sign = '⚠ '

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)
nmap <silent> <leader>i <Plug>(coc-diagnostic-info)
" " Remap keys for gotos
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)

autocmd FileType python let b:coc_root_patterns = ['.git', '.env']

" Use K to show documentation in preview window
" nnoremap <silent> K :call <SID>show_documentation()<CR>
" nnoremap <leader>K <Plug>(coc-float-hide)
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
nmap <leader>qf  <Plug>(coc-fix-current)
" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')
" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)
"
nnoremap <silent> <leader>d  :<C-u>CocDiagnostics<cr>
